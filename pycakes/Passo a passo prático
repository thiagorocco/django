*** Para eliminar processo do django no linux *** 
    sudo lsof -i :8000
    sudo kill -9 <PID>



*** O MÍNIMO PARA INICIAR UM PROJETO DJANGO ***git

    1. Crie uma pasta para o novo projeto django com o ambiente virtual.
    2. pip install django. Dica: limpe o terminal com CTRL+L em vez de clear.
    3. pip freeze > requirements.txt.
    4. django-admin startproject nome_do_projeto . (o ponto é importante para que o manage.py fique na pasta raiz)
    5. Rode o projeto: python manage.py runserver

    Comentários sobre os arquivos gerados:
        Settings.py é o coração do django onde há a configuração de secret-key, hosts, installed_apps e root-url-conf.

    6. Crie o app: django-admin startapp nome_do_app.
    7. Dentro da pasta do app crie um arquivo chamado urls.py. Pegue o conteúdo de core/urls.py e copie e cole para ele.
    8. Em burguer/urls.py inclua no urlpatterns path('', views.home, name='home') e importe a biblioteca views = from . import views
    9. Agora crie essa view que você indicou em urls dentro do arquivo views.py:

        def home(request):
        return HttpResponse('Hello, World!!!')

    Isso ainda não é suficiente para o app funcionar. No arquivo core/urls.py, que é o arquivo global de urls, precisa ter
    uma rota configurada para o novo arquivo urls.py dentro de burguer.
    10. Em core/urls.py em urlpatterns insira a seguinte instrução:
            path('', include('nome_do_app.urls'))
    11. Por fim para o app funcionar vá até core/settings.py e na última linha de INSTALLED_APPS insira a seguinte instrução:
        'burguer',

*** INCLUSÃO DE TEMPLATES HTML COM BOOTSTRAP ***
    Dentro da pasta do app nome_do_app, crie uma nova pasta chamada templates e dentro dela uma pasta chamada nome_do_app. 
    Ficará assim: nome_do_app/templates/nome_do_app

    1. Crie uma página base.html incluindo as tags html com os blocos django para o titulo, para a navbar, para o banner e para o content(conteudo).
    O código ficará assim:

        <DOCTYPE html>
        <html lang="pt-br">
        <head>
            <meta charset="UTF-8">
            <title>{% block titulo %} {% endblock %}</title>
            <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" rel="stylesheet" 
            integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" crossorigin="anonymous">
        </head>
        <body class="bg-dark">
                <div class="container-fluid"></div>
                <div class="row">
                    <div class="col">
                        <nav>
                            {% block navbar %} {% endblock %}
                        </nav>
                        <main>
                            {% block banner %} {% endblock %}
                            {% block content %} {% endblock %}
                        </main>
                    </div>
                </div>
                <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js" 
                integrity="sha384-A3rJD856KowSb7dwlZdYEkO39Gagi7vIsF0jrRAoQmDKKtQBHUuLZ9AsSv4jD4Xa" crossorigin="anonymous"></script>
        </body>
        </html>

    2. Ainda nesse mesmo diretório crie o arquivo home.html que reutilizará o template base.html com tags django através do seguinte código:
        {% extends 'nome_do_app/base.html' %}

        {% block titulo %} Bolos e Tortas(Ou o nome que preferir) {% endblock %}

        {% block navbar %}
            {% include 'fragments/navbar.html' %}
        {% endblock %}

        {% block banner %}
            {% include 'fragments/banner.html' %}
        {% endblock %}

        {% block content %}
            {% include 'fragments/conteudo.html' %}
        {% endblock %}

    3. Atualize o arquivo view.py no método home para retornar render(request,'nome_do_app/home.html') 
    
    4. Dentro da pasta do app, crie uma pasta e uma subpasta = static/nome_do_app. Dentro dela insira uma imagem de apresentação inicial do seu produto que
    ficará vinculada à página banner. 
    5. Crie uma pasta dentro de templates chamada "fragments".  Dentro desse diretório crie os arquivos html chamados banner, conteudo e navbar.
    6. Na página banner.html insira o seguinte código:

    {% load static %}
    <div class="container-fluid mt-5">
        <div class="row d-flex align-items-center">
            <div class="col-md-6 text-warning justify-content-center">

                <hr class="col-lg-6 col-xl-8 offset-lg-3 offset-xl-2"
                style="height:5px;color:red;background-color:red">

                <h1 class="text-center display-1">Bolos e tortas</h1>
                <h1 class="text-center text-danger">Aprecie cada pedaço!</h1>

                <hr class="col-lg-6 col-xl-8 offset-lg-3 offset-xl-2 mt-4"
                style="height:5px;color:red; background-color: red">

            </div>
            <div class="col-md-6">
                <img src="{% static 'cakes/cake-slice.jpg' %}" class="img-fluid">
            </div>
        </div>
    </div>

    7. A página navbar.html será responsável pelo menuzinho de opções na parte de cima do site. Insira o seguinte código html com as classes Bootstrap. 
    Apenas a tag <a> com o título do App conterá uma tag django que redireciona para a home.
    
        <nav class="navbar navbar-expand-lg bg-dark">
          <div class="container-fluid">
            <a class="navbar-brand text-warning fs-3" href="{% url 'home' %}">Bolos e tortas</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" 
            aria-expanded="false" aria-label="Toggle navigation">
              <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
              <ul class="navbar-nav me-auto ms-auto mb-2 mb-lg-0">
                <li class="nav-item">
                  <a class="nav-link active text-warning" aria-current="page" href="#">
                    Contato
                    <i class="fa-brands fa-whatsapp text-warning ms-2"></i>
                    <span class="text ms-2 text-warning">9.8754-3265</span>
                  </a>
                </li>
                <li class="nav-item">
                  <a class="nav-link text-warning" href="#">
                    <i class="fa-solid fa-location-dot text-warning"></i>
                    <span class="text ms-2 text-warning">Paraná, Curitiba.</span>
                  </a>
                </li>
              </ul>
              <ul class="navbar-nav">
                <li class="nav-item">
                  <a class="btn btn-large btn-warning" aria-current="page" href="#">
                    <span class="text">Login</span>
                  </a>
                </li>
                <li class="nav-item mx-lg-2">
                  <a class="btn btn-large btn-warning" aria-current="page" href="#">
                    <span class="text">Cadastre-se</span>
                  </a>
                </li>
              </ul>
              <form class="d-flex" role="search">
                <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
                <button class="btn btn-outline-success" type="submit">Search</button>
              </form>
            </div>
          </div>
        </nav>

    8. Antes de prosseguirmos com a criação da página conteudo.html. Vamos criar um banco de dados e registros para navegar entre eles. Para isso
    é necessário criar models e migrations no django.
    


*** CRIAÇÃO DE MODELS ***
    Um model, segundo a documentação do django, é a fonte única e definitiva de informações sobre os dados que armazenamos(Tabelas do banco de dados).
    1. Em nome_do_app/models.py crie uma classe chamada Produto e herde a classe models.Model
    
    from django.db import models

    # Create your models here.
    class Produto(models.Model):
        nome = models.TextField(null=False, blank=False, default="")
        descricao = models.TextField(null=False, blank=False)
        preco = models.FloatField(null=False, blank=False)
        imagem = models.ImageField(upload_to='nome_do_app/img', default='', null=False, blank=False)

        def __str__(self):
            return self.nome


    2. Dentro da pasta do app crie a pasta img.

    3. Execute o comando: python -m pip install Pillow. Isso é necessário para usar campos do tipo ImageField.


    4. Execute o comando: python manage.py makemigrations
        Esse comando prepara o modelo de dados para a posterior criação da tabela no banco de dados.
        O banco de dados padrão é o sqlite. Você pode conferir a configuração em core(pasta do projeto)/settings em DATABASES
    5 . Execute o comando: python manage.py migrate
        Isso fará a criação efetiva das tabelas no banco de dados. Mas quais tabelas? São tabelas referente aos INSTALLED_APPS definidos em settings.py, incluindo
        o app 'nome_do_app'
    6 . Execute o comando: python manage.py creatsuperuser
        Isso cria um super usuário para acessar o banco de dados
            Defina um nome*, você pode ignorar o endereço de e-mail e precisa cadastrar uma senha*.

    7. Vamos criar o acesso para manipular a model Produto.
        Vá em nome_do_app/admin.py e inclua o seguinte código: 
            
            from django.contrib import admin
            from cakes.models import Produto

            # Register your models here.
            admin.site.register(Produto)

    8. Agora rode o servidor django(python manage.py runserver). Acesse localhost:8000/admin, informe login e senha que cadastrou e 
    faça as operações de CRUD no painel como quiser.

    9. Cadastre ao menos 3 produtos incluindo nome, descrição, preço e foto.



*** TRABALHANDO COM ARQUIVOS ESTÁTICOS(IMAGENS, CSS E JAVASCRIPT) ***

    1. Veja que o atributo imagem agora está no banco de dados, porém não está funcionando, é preciso informar ao django o caminho de arquivos estáticos.
    5. Vamos até "settings.py" na pasta do projeto.
    6. Vá até a linha da constante STATIC_URL e abaixo dela inclua a constante STATIC_ROOT e atribua o valor = os.path.join(BASE_DIR, STATIC_URL).
    Esse comando exige que a biblioteca os seja importada.
    7. Abaixo de STATIC_ROOT inclua mais duas constantes:
        MEDIA_URL = 'media/'
        MEDIA_ROOT = os.path.join(BASE_DIR, 'static/images')
    Esses nomes de constante são padrões do django.
    8. Por fim, para que o carregamento da imagem funcione corretamente vá até nome_do_app/urls.py e inclua logo após o colchete de urlpatterns a seguinte instrução:
         + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
    Não se esqueça de importar as bibliotecas: 
        from django.conf import settings
        from django.conf.urls.static import static
    9. O djando pegará a imagem de onde estiver e vai gravar no diretório static/images/nome_do_app/img 

*** LAYOUT E BOOTSTRAP ***
    Configuraremos as páginas html de acordo com o layout nav bar do bootstrap
    1. Altere a base.html com tags django e crie uma nova pasta dentro de templates chamada fragments e crie um arquivo html chamado navbar. Commit 09:09
    2. Vá ao site do bootstrap e copie e cole o código navbar padrão dele.
    3. Vá até o arquivo home.html e, entre o título e o content insira:
        {% block header %}
            {% include 'fragments/navbar.html' %}
        {% endblock %}
    4. Faça algumas alterações no arquivo navbar.html como a navbar-brand, elimine dropdown-menu e o nav-item disabled
    5. Na classe navbar-nav insira mais a classe "ms-auto" do bootstrap para centralizar o conteúdo.
    6. Troque o texto das tags e na tag nav troque a cor substituindo o bg-... por bg-dark.
    7. No elemento <a> com classe navbar-brand insira a classe "text-warning fs-3" para formatar a cor e o tamanho da fonte.
    8. Crie dois botões login e cadastra-se. Copie o código ul com os dois links <a> e faça algumas alterações para classes de botões.
    9. Vamos adicionar algumas imagens com fontawesome. Acrescente ao title a seguinte tag:
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    Assim será possível usar os ícones do fontawesome
    10. Ao contato insira a tag <i> seguida por classes do fontawesome que mostrem a imagem de icones e faça o mesmo para o contato.

    BANNER + CARREGAMENTOS DE IMAGENS ESTÁTICAS
    1. Vamos ao arquivo base.html e insira a classe bg-dark no body.
    2. Dentro da div "col" troque a tag header por nav e no bloco django no lugar de header coloque navbar.
    3. Agora em home.html também troque header por navbar.
    4. No diretório fragments crie um arquivo chamado banner.html.
    5. Apague o código inicial html gerado pelo Pycharm. Insira div class="container-fluid" e outras tags dentro dela, não se esqueça de incluir o {% load static %} no inicio 
    6. Em base.html, dentro do main insira um bloco django chamando banner.
    7. Em home.html copie o bloco navbar e cole logo abaixo dele. Altere de navbar para banner tanto no bloco como no include.
    8. Dentro da pasta do app burguer crie o seguinte diretório: static/burguer e dentro dele insira a imagem.
    9. Para a imagem carregar é preciso alterar o arquivo burguer/urls.py na última linha, onde tiver MEDIA substitua por STATIC.
    10. Lembre-se a imagem deve estar armazenada em burguer/static/burguer/burguer-slide.jpg.

    CARDS E GRID CARDS
    1. Em home.html no bloco content elimine o h1 que está lá e faça um include: {% include 'fragments/conteudo.html '%}.
    2. Crie o arquivo conteudo.html na pasta fragments.
    3. Insira a tag load static do django e insira divs com a classe row do bootstrap contendo o caminho das imagens como 
    <img src="{% static 'burguer/burguer-slide.jpg' %}" class="card-img-top" alt="hamburguer">

*** QUERYSETAPI E RECUPERAÇÃO DE INFORMAÇÕES A PARTIR DO BANCO DE DADOS ***
    * Dessa vez para manipular as informações do BD não usaremos django admin e sim o django shell
    1. Instale o IPython através do comando: pip install IPython.
    2. Execute o comando python manage.py shell.
    3. Digite o comando = from burguer.models import Produto. Estamos importando o modelo Produto.
    4. Na próxima linha = produto = Produto(). Estamos criando um objeto do tipo Produto().
    5. Digite = produto.descricao = "Bomba Atômica".
    6. Digite = produto.preco = 19.99. Para cada novo registro a inserir é necessário criar um novo objeto de Produto. Ex. p1 = Produto, p2 = Produto.
    7. Por fim digite = produto.save(). Caso esse comando dê erro você precisará executar novamente os comandos makemigrations e migrate do python manage.py.
    8. Consulte os produtos cadastrados através do comando: produtos = Produto.objects.all(), isso é equivalente a um SELECT * FROM produtos.
    9. Digite produtos e você verá os registros cadastrados dentro de um objeto QuerySet.

    * CARREGANDO DE INFORMAÇÕES A PARTIR DO BANCO DE DADOS *
    1. Abra o arquivo models.py e crie mais um atributo chamado "nome" do tipo TextField(null=False, blank=False, default="")
    2. Após essa alteração execute os comandos: python manage.py makemigrations e python manage.py migrate
    3. Execute o servidor e acesse o django/admin.
    4. Altera o nome e a descrição dos hamburgueres. Na verdade o que é descrição passará a ser nome e você precisa incluir uma descrição mais completa para os laches.
    5. Em models.py no método __str__ altere o return para self.nome em vez de self.descricao
    6. Vá até burguer/views.py e adicione ao método home um objeto da classe Produto(models) = produto = Produto.objects.all(). Não se esqueça de importá-lo.
    7. Logo abaixo dessa declaração declare um dicionário que receberá esses dados do banco de dados = context = {'produtos' : produtos} e m return passe esse dicionário como um novo parâmetro.
    8. Vá até o template fragments/conteudo.html. Apague os dois últimos cards de produto, pois faremos a inserção dos cards dinamicamente pelos dados do banco de dados.
    9. Agora envolve a div desse card dentro de um laço for. {% for produto in produtos %} <div></div> {% endfor %}.
    10. Agora faça as alterações para o card ficar dinâmico. Na div "card-title" insira {{ produto.nome }}, na div "card-text" insira {{ produto.descricao }} e na div "span" insira logo após o R$ {{ produto.preco }}

*** FUNDAMENTOS DA NAVEGAÇÃO ENTRE PÁGINAS ***

    *Deep link e sistema de rotas e passagens de parâmetros
    1. Copie o conteúdo de home.html e sobrescreva o conteúdo de produto.html
    2. Faça algumas alterações: Mude o conteúdo do block titulo para "Produto", limpe o conteúdo do block banner, limpe conteúdo do block content e adicione um h1 com class="textwhite" Meu Produto.
    3. Agora vamos fazer um link da página conteúdo para a página de produto. No arquivo conteúdo.html envolva a tag img com a tag <a>:
    <a href="{% url 'produtos' produto.id %}"></a>
    4. Faça um ajuste em urls.py para o link funcionar: Em urlspatterns, no segundo path no 1.o parâmetro  altere para 'produtos/<int:produto_id>', no 2.o parametro
    altere para views.detalhe_produto e no 3.o parametro altere para 'produtos'.
    5. Vá em views.py e na função produto renomei-a para ''detalhe_produto' e insira um novo parametro = produto_id e no seu escopo, antes de return, declare:
            produto = Produto.objects.get(pk=produto_id)
            context = {
                'produto': produto
            }
    6. No return da função detalhe_produto, insira no segundo parametro a variavel context.
    7. Vá em produto.html e altera o h1 do bloco content para receber o nome dinâmico do banco de dados = {{ produto.descricao }}

    * Template para detalhamento do produto *
    1. Acesse produto.html
    2. Após o bloco {% extends 'burguer/base.html' %} acrescente {% load static %}.
    3. Em block content adicione:
        <div class="col-md-6 offset-3 d-flex flex-column justify-content-center align-items-center">
            <h1 class="text-info text-center mb-5">{{ produto.nome }}</h1>
             <img src="{% static 'burguer/burguer-slide.jpg' %}"
                  class="card-img-top"
                  alt="hamburguer"
                  style="height:450px;width:450px">
            <h4 class="text-warning text-center">{{ produto.descricao }}</h4>
            <div class="span display-4 text-info">Apenas R$ {{ produto.preco }}</div>
        </div>
    * Link para a página inicial *
    1. Vá em navbar.html e na primeira tag <a> em href insira "{% ulr 'home' %}"
    
*** Recuperando imagens cadastradas via processo de upload (MEDIA_URL e MEDIA_ROOT) ***
    1. Vá em produto.html e no source da imagem(src) apague o conteúdo existente e insira {{ produto.imagem.url }}
    2. Em burguer/urls.py na última linha substitua "STATIC_URL" e "STATIC_ROOT" por "MEDIA_URL" e "STATIC_ROOT"
    3. Voltando ao arquivo produto.html vá até a DIV class="card" e insira a classe do bootstrap p-5 para ficar um padding 5 em todas as direções.     



