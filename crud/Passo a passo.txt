1. Crie uma pasta para o projeto.

2. No terminal crie um ambiente virtual: python3 -m venv env

3. Ative o ambiente virtual: . env/bin/activate

4. Instale o django: pip install django.

5. Crie um projeto no django: django-admin startproject projeto .

6. Crie o banco de dados: python manage.py migrate

7. Crie um super usuário para acessar o admin do django: python manage.py createsuperuser. Depois informe username, email é opcional, senha.

8. Crie um app no django: django-admin startapp app.

9. Registre esse novo app em projeto/settings. Em INSTALLED_APPS, após a última elemento do array insira:
    'app',

10. Em projeto/urls.py, após o primeiro path inclua o seguinte path:
    path('app/',include('app.urls')), # *** Importe o include também 

11. Agora em app crie o arquivo urls.py.

12. Dentro do arquivo app/urls.py indique a view home. Insira o seguinte código:
    
    from django.contrib import admin
    from django.urls import path, include
    from .views import home

    urlpatterns = [
        path('', home),
    ]

13. Em app/views.py crie a view home. Insira o seguinte código:
    
    from django.shortcuts import render

    def home(request):
        return render(request, 'app/index.html')
    
14. Agore crie o template index.html em app/templates/app/index.html. Insira um código inicial simples como:

    <html>
    <head>
        <title>Index</title>
    </head>
    <body>
        <h1>Hello, World!</h1>
    </body>
    </html>

15. Agora vá em app/models.py e insira o seguinte código para criar um Model:
    from django.db import models

    # Create your models here.
    class Pessoa(models.Model):
        nome = models.CharField(max_length=100)     

16. Registre essa model em admin.py inserindo o seguinte código:
    from .models import Pessoa

    admin.site.register(Pessoa)

17. Execute os comandos: python manage.py makemigrations e depois na sequência python manage.py migrate.

18. Vá em app/views.py e insira o código:
    
    from django.shortcuts import render
    from app.models import Pessoa

    def home(request):
        pessoas = Pessoa.objects.all()

        #Isso dará acesso aos dados do banco de dados no template index.html
        return render(request,'app/index.html',{"pessoas": pessoas})

19. Agora em index.html logo abaixo da lista dinâmica insira um form para cadastrar novos usuários. O código do arquivo ficará dessa forma:

    <!DOCTYPE html>
    <html lang="pt-br">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Hello World</title>
    </head>
    <body>
        <h1>Hello, World!</h1>
        <ul>
            {% for pessoa in pessoas %}
            <li>{{ pessoa.id}} - {{pessoa.nome}}</li>
            {% endfor %}
        </ul>

        <form action="{% url 'salvar' %}"  method="post">
            {% csrf_token %}
            <input type="text" name="nome">
            <button type="submit">Salvar</button>
        </form>
        

    </body>
    </html>

20. Vá até app/urls.py e inclua uma rota para a view salvar que iremos criar depois. O código ficará assim:

    from django.contrib import admin
    from django.urls import path, include
    from .views import home, salvar

    urlpatterns = [
        path('', home),
        path('salvar/',salvar, name="salvar"),
    ]

21. Vá até views.py e crie a view salvar. O código do arquivo ficará assim:

    from django.shortcuts import render
    from app.models import Pessoa

    def home(request):
        pessoas = Pessoa.objects.all()

        #Isso dará acesso aos dados do banco de dados no template index.html
        return render(request,'app/index.html',{"pessoas": pessoas})

    def salvar(request):
        #Cadastrando novo registro
        vnome = request.POST.get("nome")
        #Atributo nome do banco de dados vai receber o valor da variável nome(vnome)
        Pessoa.objects.create(nome=vnome)

        #Atualizando a lista de usuários cadastrados
        pessoas = Pessoa.objects.all()
        return render(request, "index.html", {"pessoas":pessoas})

22. Agora criaremos a função de editar o registro. Em index.html acrescente à <li> do usuário um <a href> com o link de editar. O código do arquivo ficará assim:

    <!DOCTYPE html>
    <html lang="pt-br">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Hello World</title>
    </head>
    <body>
        <h1>Hello, World!</h1>
        <ul>
            {% for pessoa in pessoas %}
            <li>{{ pessoa.id}} - {{pessoa.nome}} <a href="{% url 'editar' pessoa.id%}">Editar</a></li> <!-- Esse foi o trecho alterado -->
            {% endfor %}
        </ul>

        <form action="{% url 'salvar' %}" method="post">
            {% csrf_token %}
            <input type="text" name="nome">
            <button type="submit">Salvar</button>
        </form>
    </body>
    </html>

23. Crie a url editar em app/urls.py. O código do arquivo ficará assim:

    from django.contrib import admin
    from django.urls import path, include
    from .views import home, salvar, editar # Esse trecho foi alterado

    urlpatterns = [
        path('', home),
        path('salvar/', salvar, name='salvar'),
        #Aqui a url tem o id do usuário passado na url
        path('editar/<int:id>', editar, name='editar'), # Esse trecho foi alterado
    ]

24. Vá em views.py e crie a view editar. O código do arquivo ficará dessa forma:
    
    from django.shortcuts import render
    from app.models import Pessoa

    def home(request):
        pessoas = Pessoa.objects.all()

        #Isso dará acesso aos dados do banco de dados no template index.html
        return render(request,'app/index.html',{"pessoas": pessoas})

    def salvar(request):
        #Cadastrando novo registro
        vnome = request.POST.get("nome")
        #Atributo nome do banco de dados vai receber o valor da variável nome(vnome)
        Pessoa.objects.create(nome=vnome)

        #Atualizando a lista de usuários cadastrados
        pessoas = Pessoa.objects.all()
        return render(request, "app/index.html", {"pessoas":pessoas})
    
    # Esse foi o trecho alterado
    def editar(request, id):
        pessoa = Pessoa.objects.get(id=id)
        return render(request, 'update.html',{"pessoa" : pessoa})    

25. Agora crie o template update.html dentro de app/templates/app com o seguinte código:
    <!DOCTYPE html>
    <html lang="pt-br">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Editar</title>
    </head>
    <body>
        <h1>Edição de registro</h1>

        {{ pessoa.id}} - {{pessoa.nome}}
        
        <form action="{% url 'update' pessoa.id %}" method="post">
            {% csrf_token %}
            <input type="text" name="nome" value="{{ pessoa.nome }}">
            <button type="submit">Editar</button>
        </form>
    </body>
    </html>

26. Crie uma rota para a view update em app/urls.py. O código ficará assim:
    from django.contrib import admin
    from django.urls import path
    from .views import home, salvar, editar, update

    urlpatterns = [
        path('', home),
        path('salvar/', salvar, name='salvar'),
        path('editar/<int:id>', editar, name='editar'),
        path('update/<int:id>', update, name='update'), # trecho que foi alterado/incluso.
    ]

27. Vá em views.py e crie a view update. O código do arquivo ficará assim:
    from django.shortcuts import render, redirect
    from app.models import Pessoa

    def home(request):
        pessoas = Pessoa.objects.all()

        #Isso dará acesso aos dados do banco de dados no template index.html
        return render(request,'app/index.html',{"pessoas": pessoas})

    def salvar(request):
        #Cadastrando novo registro
        vnome = request.POST.get("nome")
        #Atributo nome do banco de dados vai receber o valor da variável nome(vnome)
        Pessoa.objects.create(nome=vnome)

        #Atualizando a lista de usuários cadastrados
        pessoas = Pessoa.objects.all()
        return render(request, "app/index.html", {"pessoas":pessoas})

    def editar(request, id):
        pessoa = Pessoa.objects.get(id=id)
        return render(request, 'app/update.html',{"pessoa" : pessoa})
    
    # *** Trecho que foi alterado *** 
    def update(request, id):
        vnome = request.POST.get("nome")
        pessoa = Pessoa.objects.get(id=id)
        pessoa.nome = vnome
        pessoa.save()
        return redirect(home)

28. Vamos para a última funcionalidade do CRUD, o delete. Em index.html, assim como fez o link para o editar, faça para o excluir. Código ficará assim:

    <!DOCTYPE html>
    <html lang="pt-br">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Hello World</title>
    </head>
    <body>
        <h1>Hello, World!</h1>
        <ul>
            {% for pessoa in pessoas %}
            <li>{{ pessoa.id}} - {{pessoa.nome}} 
                <a href="{% url 'editar' pessoa.id%}">Editar</a>
                <a href="{% url 'delete' pessoa.id%}">Excluir</a>
            </li>
            {% endfor %}
        </ul>

        <form action="{% url 'salvar' %}" method="post">
            {% csrf_token %}
            <input type="text" name="nome">
            <button type="submit">Salvar</button>
        </form>
    </body>
    </html>

29. Em app/urls.py define a rota para a view delete. Código ficará assim:

    from django.urls import path
    from .views import home, salvar, editar, update, delete

    urlpatterns = [
        path('', home),
        path('salvar/', salvar, name='salvar'),
        path('editar/<int:id>', editar, name='editar'),
        path('update/<int:id>', update, name='update'),
        path('delete/<int:id>', delete, name='delete'), # trecho alterado/incluído
    ]

30. Em views.py crie a view delete. Código ficará assim:
    from django.shortcuts import render, redirect
    from app.models import Pessoa

    def home(request):
        pessoas = Pessoa.objects.all()

        #Isso dará acesso aos dados do banco de dados no template index.html
        return render(request,'app/index.html',{"pessoas": pessoas})

    def salvar(request):
        #Cadastrando novo registro
        vnome = request.POST.get("nome")
        #Atributo nome do banco de dados vai receber o valor da variável nome(vnome)
        Pessoa.objects.create(nome=vnome)

        #Atualizando a lista de usuários cadastrados
        pessoas = Pessoa.objects.all()
        return render(request, "app/index.html", {"pessoas":pessoas})

    def editar(request, id):
        pessoa = Pessoa.objects.get(id=id)
        return render(request, 'app/update.html',{"pessoa" : pessoa})

    def update(request, id):
        vnome = request.POST.get("nome")
        pessoa = Pessoa.objects.get(id=id)
        pessoa.nome = vnome
        pessoa.save()
        return redirect(home)
        
    # *** Trecho alterado/incluido ***
    def delete(request, id):
        pessoa = Pessoa.objects.get(id=id)
        pessoa.delete()
        return redirect(home)
